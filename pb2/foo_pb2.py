# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: foo.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import service as _service
from google.protobuf import service_reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import public_pb2 as public__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='foo.proto',
  package='foo',
  syntax='proto3',
  serialized_pb=_b('\n\tfoo.proto\x12\x03\x66oo\x1a\x0cpublic.proto\"7\n\x07TestMsg\x12\x0c\n\x04\x62\x61r1\x18\x01 \x01(\x05\x12\x0c\n\x04\x62\x61r2\x18\x02 \x01(\t\x12\x10\n\x08\x63ountMax\x18\x03 \x01(\x0f\">\n\x0cTestResponse\x12\x0e\n\x06\x66ield1\x18\x01 \x01(\t\x12\x0e\n\x06\x66ield2\x18\x02 \x01(\x08\x12\x0e\n\x06\x66ield3\x18\x03 \x01(\x07\x32v\n\x10TerminalToServer\x12.\n\x10rpc_do_something\x12\x0c.foo.TestMsg\x1a\x0c.public.Fake\x12\x32\n\x0frpc_hello_world\x12\x0c.foo.TestMsg\x1a\x11.foo.TestResponse2B\n\x10ServerToTerminal\x12.\n\x10rpc_do_something\x12\x0c.foo.TestMsg\x1a\x0c.public.FakeB\x03\x90\x01\x01\x62\x06proto3')
  ,
  dependencies=[public__pb2.DESCRIPTOR,])




_TESTMSG = _descriptor.Descriptor(
  name='TestMsg',
  full_name='foo.TestMsg',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='bar1', full_name='foo.TestMsg.bar1', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='bar2', full_name='foo.TestMsg.bar2', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='countMax', full_name='foo.TestMsg.countMax', index=2,
      number=3, type=15, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=32,
  serialized_end=87,
)


_TESTRESPONSE = _descriptor.Descriptor(
  name='TestResponse',
  full_name='foo.TestResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='field1', full_name='foo.TestResponse.field1', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='field2', full_name='foo.TestResponse.field2', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='field3', full_name='foo.TestResponse.field3', index=2,
      number=3, type=7, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=89,
  serialized_end=151,
)

DESCRIPTOR.message_types_by_name['TestMsg'] = _TESTMSG
DESCRIPTOR.message_types_by_name['TestResponse'] = _TESTRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

TestMsg = _reflection.GeneratedProtocolMessageType('TestMsg', (_message.Message,), dict(
  DESCRIPTOR = _TESTMSG,
  __module__ = 'foo_pb2'
  # @@protoc_insertion_point(class_scope:foo.TestMsg)
  ))
_sym_db.RegisterMessage(TestMsg)

TestResponse = _reflection.GeneratedProtocolMessageType('TestResponse', (_message.Message,), dict(
  DESCRIPTOR = _TESTRESPONSE,
  __module__ = 'foo_pb2'
  # @@protoc_insertion_point(class_scope:foo.TestResponse)
  ))
_sym_db.RegisterMessage(TestResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\220\001\001'))

_TERMINALTOSERVER = _descriptor.ServiceDescriptor(
  name='TerminalToServer',
  full_name='foo.TerminalToServer',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=153,
  serialized_end=271,
  methods=[
  _descriptor.MethodDescriptor(
    name='rpc_do_something',
    full_name='foo.TerminalToServer.rpc_do_something',
    index=0,
    containing_service=None,
    input_type=_TESTMSG,
    output_type=public__pb2._FAKE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='rpc_hello_world',
    full_name='foo.TerminalToServer.rpc_hello_world',
    index=1,
    containing_service=None,
    input_type=_TESTMSG,
    output_type=_TESTRESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_TERMINALTOSERVER)

DESCRIPTOR.services_by_name['TerminalToServer'] = _TERMINALTOSERVER


_SERVERTOTERMINAL = _descriptor.ServiceDescriptor(
  name='ServerToTerminal',
  full_name='foo.ServerToTerminal',
  file=DESCRIPTOR,
  index=1,
  options=None,
  serialized_start=273,
  serialized_end=339,
  methods=[
  _descriptor.MethodDescriptor(
    name='rpc_do_something',
    full_name='foo.ServerToTerminal.rpc_do_something',
    index=0,
    containing_service=None,
    input_type=_TESTMSG,
    output_type=public__pb2._FAKE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_SERVERTOTERMINAL)

DESCRIPTOR.services_by_name['ServerToTerminal'] = _SERVERTOTERMINAL

TerminalToServer = service_reflection.GeneratedServiceType('TerminalToServer', (_service.Service,), dict(
  DESCRIPTOR = _TERMINALTOSERVER,
  __module__ = 'foo_pb2'
  ))

TerminalToServer_Stub = service_reflection.GeneratedServiceStubType('TerminalToServer_Stub', (TerminalToServer,), dict(
  DESCRIPTOR = _TERMINALTOSERVER,
  __module__ = 'foo_pb2'
  ))


ServerToTerminal = service_reflection.GeneratedServiceType('ServerToTerminal', (_service.Service,), dict(
  DESCRIPTOR = _SERVERTOTERMINAL,
  __module__ = 'foo_pb2'
  ))

ServerToTerminal_Stub = service_reflection.GeneratedServiceStubType('ServerToTerminal_Stub', (ServerToTerminal,), dict(
  DESCRIPTOR = _SERVERTOTERMINAL,
  __module__ = 'foo_pb2'
  ))


# @@protoc_insertion_point(module_scope)
